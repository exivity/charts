# -- Override deployment name (e.g., useful when deploying multiple instances of the application).
nameOverride: ""

# Set to the actual licence for production environments.
# For evaluation purposes, use "demo", but note that "demo" will not allow you to run reports.
# For a trial license, please contact license@exivity.com.
licence: "demo"

# Secret keys used for application security. Random values are generated on installation if not set.
# Random values are generated on installation if not set, but it's recommended to specify values for production.
secret:
  appKey: "" # Used to encrypt application data. Specify a value for production. Max length: 64 characters.
  jwtSecret: "" # Used for signing JWTs. Specify a value for production.

ingress:
  enabled: true # Indicates if ingress is enabled.
  host: exivity # The host or domain name for the ingress route.
  ingressClassName: "" # Ingress class name; if empty, no class is set.

  # Trusted proxies are configured for handling headers correctly behind a proxy or load balancer.
  # This is used particularly when services like Traefik act as the load balancer in a Kubernetes cluster.
  # Specify IP addresses, CIDR blocks, or a wildcard '*' to trust all proxies.
  # Example values: '10.0.0.1', '10.244.0.0/16', '127.0.0.1, 10.244.0.0/16', or '*'.
  trustedProxy: ""

  annotations:
    {}
    # Example annotations for ingress behavior:
    # kubernetes.io/ingress.allow-http:         "false"
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/use-regex:    "true"

  tls:
    enabled: false # Controls if TLS is handled by ingress; disable if TLS is terminated externally.
    secret: "-" # Name of an existing TLS secret or '-' to generate a new certificate.

storage:
  storageClass: "" # Specifies the storage class used for provisioning volumes. If empty, the default class is used.
  helmResourcePolicyKeep: true # Ensures that storage resources are retained after a Helm release is deleted.
  sharedVolumeAccessMode: ReadWriteMany # Defines the access mode for shared volumes; 'ReadWriteMany' allows multiple nodes to read/write simultaneously.

  # Permissions management for mounted volumes.
  # If enabled, an init container will run to set the ownership of all folders under /mnt.
  # This is useful when shared storage (e.g., NFS) does not preserve the correct user/group ownership.
  #
  # - enabled: Set to true to activate the permissions init container.
  # - policy: Controls when ownership is set. Use 'Always' to set ownership on every pod start, or 'OnRootMismatch' to only update when the current owner does not match the expected user/group.
  permissions:
    enabled: false # Whether to run the permissions init container for mounted volumes.
    policy: OnRootMismatch # 'Always' (set ownership every time) or 'OnRootMismatch' (only if owner does not match)

  # PVC storage sizes organized by type and component
  # Specify the storage size for each PVC as a string (e.g., "1Gi", "500Mi", etc.).
  # The sizes are grouped by their purpose (log, config, data) and component for better clarity.
  #
  # When the NFS server provisioner (https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner)
  # is used as the storage provider, the configured PVC sizes will not be enforced.
  # In this case, each PVC may consume up to the total available space on the NFS server, regardless of the size specified here.
  # Therefore, the default values for PVC sizes should not be changed when NFS is used, to ensure compatibility with existing deployments and to avoid unexpected behavior.
  #
  # When an alternative CSI storage provider (such as Longhorn) is used, the specified PVC sizes will be enforced by the storage backend.
  # In such cases, it is recommended that the PVC sizes for data and log volumes be increased according to the requirements of the production workload, as the default values may be insufficient.
  pvcSizes:
    # Log PVCs
    log:
      chronos: 1Gi
      edify: 1Gi
      executor: 1Gi
      glass: 1Gi
      griffon: 1Gi
      horizon: 1Gi
      pigeon: 1Gi
      proximityApi: 1Gi
      proximityCli: 1Gi
      transcript: 1Gi
      use: 1Gi

    # Config PVCs
    config:
      etl: 1Gi
      griffon: 1Gi
      chronos: 1Gi

    # Data PVCs
    data:
      exported: 1Gi
      extracted: 1Gi
      import: 1Gi
      report: 1Gi

# LDAP TLS certificate configuration for secure LDAP connectivity.
# This configuration allows mounting a PEM certificate into the Proximity API container
# and setting the LDAPTLS_CACERT environment variable to enable LDAP over TLS.
# Both tlsCacert and tlsCacertPath must be provided together to enable LDAP TLS.
ldap:
  # PEM certificate content for LDAP TLS validation.
  # When empty, LDAP TLS functionality is disabled.
  # tlsCacert: |
  #   -----BEGIN CERTIFICATE-----
  #   [Your Root CA certificate here]
  #   -----END CERTIFICATE-----

  # Path where the LDAP TLS certificate will be mounted in the container.
  # This path will be set as the LDAPTLS_CACERT environment variable.
  # Only used when tlsCacert is provided. Default: "/etc/ssl/certs/ldap.pem"
  tlsCacertPath: "/etc/ssl/certs/ldap.pem"

# Configuration for PostgreSQL, either as an embedded database using the Bitnami PostgreSQL chart or an external database.
# It is recommended to use an external PostgreSQL server for production environments to ensure scalability and manageability.
# The embedded PostgreSQL chart is primarily intended for testing and non-production purposes.
postgresql:
  enabled: true # Determines if the Bitnami PostgreSQL chart should be installed. Set to false when using an external database.
  global:
    postgresql:
      auth:
        database: exivity # Database name for both external and embedded databases.
        username: exivity # Username for accessing the database.
        password: Password12! # Password for the database user.
        postgresPassword: Password13! # Root password for PostgreSQL, optional when using an external database.

  # Configuration for using an external PostgreSQL database.
  host: "" # Hostname of the external database server, if applicable.
  port: 5432 # Port number on which the external database server is accessible.
  sslmode: "" # SSL mode for database connection: 'disable', 'require', 'verify-ca', or 'verify-full'.

  # Example of customizing the embedded Bitnami PostgreSQL chart for larger deployments.
  # For more options and details, refer to the Bitnami PostgreSQL Helm chart: https://bitnami.com/stack/postgresql/helm
  # primary:
  #   persistence:
  #     size: 50Gi  # Specifies the size of the persistent volume.
  #   extendedConfiguration: |
  #     shared_buffers = 2GB  # Sets the amount of memory the database server uses for shared buffers.
  #     work_mem = 32MB  # Sets the amount of memory used by internal sort operations and hash tables.
  #     wal_buffers = 64MB  # Sets the amount of memory used by WAL buffers.

# Configuration for RabbitMQ, either as an embedded server using the Bitnami RabbitMQ chart or an external message queue.
# It is recommended to use an external RabbitMQ server for production environments to ensure scalability and manageability.
# The embedded RabbitMQ chart is primarily intended for testing and non-production purposes.
# For more options and details, refer to the Bitnami RabbitMQ Helm chart: https://bitnami.com/stack/rabbitmq/helm
rabbitmq:
  enabled: true # Determines if the Bitnami RabbitMQ chart should be installed. Set to false when using an external MQ.
  clustering:
    enabled: false # Determines if clustering is enabled for RabbitMQ.

  auth:
    username: user # Username for RabbitMQ authentication.
    password: pass # Password for RabbitMQ authentication.

  # Configuration for using an external RabbitMQ server.
  host: "" # Hostname of the external RabbitMQ server, if applicable.
  port: 5672 # Port number on which the external RabbitMQ server is accessible.
  vhost: "" # Virtual host for RabbitMQ, if applicable.
  secure: false # Indicates if the connection to RabbitMQ should be secured (true/false). Set to true to enable TLS for RabbitMQ communication.

global:
  # Global security context applied to all services unless overridden per service.
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    runAsNonRoot: true

# General service configuration, defaults apply when specific service settings are not provided.
service:
  registry: docker.io # Default registry from which to pull service images.
  tag: "" # Docker image tag; specify to use a specific version.
  pullPolicy: IfNotPresent # Image pull policy; 'IfNotPresent' only pulls if the image isn't already present.

  # List of image pull secrets, used if private Docker registries require authentication.
  pullSecrets: [] # Example: ["myRegistryKey"] - Use the Kubernetes Secret name that contains the Docker registry credentials.

  # Example of an image pull secret in YAML configuration:
  # This configuration is typically applied using a Kubernetes Secret resource.
  # Here is a simple example of how an image pull secret might be defined:
  #
  # apiVersion: v1
  # kind: Secret
  # metadata:
  #   name: myRegistryKey
  # type: kubernetes.io/dockerconfigjson
  # data:
  #   .dockerconfigjson: <base64-encoded-docker-config-json>
  #
  # Replace <base64-encoded-docker-config-json> with the base64-encoded JSON string that contains the registry authentication information.

  # Configuration for the 'glass' service, Exivity's front-end component.
  glass:
    registry: ""
    repository: exivity/glass
    tag: ""
    pullPolicy: ""
    servicePort: 80
    serviceType: ClusterIP
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'proximityApi' service, handling backend API operations.
  proximityApi:
    registry: ""
    repository: exivity/proximity-api
    tag: ""
    pullPolicy: ""
    # set the PHP memory limit per requests
    # https://www.php.net/manual/en/ini.core.php#ini.memory-limit
    phpMemoryLimit: "3G"
    # Fingerprint algorithm used to verify user location matches location where token was generated.
    #   - secure: checks protocols match (e.g. http/https)
    #   - ip: Checks the IP addresses match.
    #   - useragent: Checks the request is coming from the same user agent.
    # Possible values: secure_ip_useragent / secure_useragent
    fingerPrinter: "secure_useragent"
    servicePort: 80
    serviceType: ClusterIP
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "400Mi"

  # Configuration for the 'chronos' service, part of the back-end components.
  chronos:
    registry: ""
    repository: exivity/chronos
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'dbInit' service, which initializes the database.
  dbInit:
    registry: ""
    repository: exivity/db
    tag: ""
    pullPolicy: ""
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    # Configuration for waiting for the database server to be ready before starting the service.
    waitForServer:
      resources: {} # Resources allocated for the wait operation, usually minimal.

    # Configuration for running database migrations.
    migration:
      resources: {} # Resources allocated for migration operations, define as needed.

  # Configuration for the 'dummyData' service, used for deploying dummy data for testing purposes.
  dummyData:
    enabled: false
    registry: ""
    repository: exivity/dummy-data
    tag: "main" # Tag should be changed to match the rest in the future
    pullPolicy: ""
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources: {}

  # Configuration for the 'edify' service, part of the backend processing components.
  edify:
    registry: ""
    repository: exivity/edify
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    # It is recommended to set tmpPath to "/tmp" to prevent temporary files from being written to the PVC, which could impact service performance.
    # tmpPath: "/tmp"  # Custom path for temporary files and caching.
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'executor' service, part of the backend processing components.
  executor:
    registry: ""
    repository: exivity/executor
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'griffon' service, part of the backend processing components.
  griffon:
    registry: ""
    repository: exivity/griffon
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'horizon' service, part of the backend processing components.
  horizon:
    registry: ""
    repository: exivity/horizon
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'pigeon' service, which serves as the notification system.
  pigeon:
    registry: ""
    repository: exivity/pigeon
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'proximityCli' service, part of the backend processing components.
  proximityCli:
    registry: ""
    repository: exivity/proximity-cli
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'transcript' service, part of the backend processing components.
  transcript:
    registry: ""
    repository: exivity/transcript
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

  # Configuration for the 'use' service, part of the backend processing components.
  use:
    registry: ""
    repository: exivity/use
    tag: ""
    pullPolicy: ""
    replicas: 1
    nodeName: ""
    nodeSelector: {}
    # securityContext:
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    #   runAsNonRoot: true

    # Resource requirements for the service pod.
    resources:
      requests:
        cpu: "25m"
        memory: "50Mi"

    # Configuration for the init container that installs CA certificates.
    initContainers:
      installCACert:
        resources:
          requests:
            cpu: "25m"
            memory: "50Mi"

    # CA certificates configuration section. Add CA certificates that your service uses here.
    # Each certificate should be listed as a key-value pair, where the key is a unique identifier.
    caCertificates:
      {}
      # Example placeholders for CA certificates. Replace with your actual certificate data.
      # rootCA.pem: |
      #   -----BEGIN CERTIFICATE-----
      #   [Your Root CA certificate here]
      #   -----END CERTIFICATE-----
      # intermediateCA.pem: |
      #   -----BEGIN CERTIFICATE-----
      #   [Your Intermediate CA certificate here]
      #   -----END CERTIFICATE-----

# Default log level for backend services. Accepts 'debug', 'info'.
# Use 'debug' for development environments and 'info' or higher for production to reduce log verbosity.
logLevel:
  backend: "info"

# Configuration for readiness and liveness probes for services.
# These settings allow you to enable or disable the probes and configure their parameters.
probes:
  livenessProbe:
    enabled: true
    initialDelaySeconds: 3
    periodSeconds: 30
    failureThreshold: 120
  readinessProbe:
    enabled: true
    initialDelaySeconds: 3
    periodSeconds: 30
    failureThreshold: 60

# Prometheus monitoring configuration
prometheus:
  metricServer:
    enabled: false
    serviceMonitor:
      enabled: false

# Proximity Migration Job Configuration
proximityMigrate:
  nodeName: "" # Specific node name to run the migration job on (optional)
  nodeSelector: {} # Node selector for the migration job (independent of proximity API)
  # securityContext:
  #   runAsUser: 1000
  #   runAsGroup: 1000
  #   fsGroup: 1000
  #   runAsNonRoot: true

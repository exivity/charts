name: Release Charts

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'charts/**'
      - '.github/workflows/chart-release.yml'

jobs:
  helm-release:
    runs-on: ubuntu-latest
    env:
      GPG_KEY_ID: ${{ secrets.HELM_RSA_KEY_ID }}
      GPG_PASSPHRASE: ${{ secrets.HELM_RSA_PASSPHRASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Configure GPG
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          
          # Handle both raw armored keys and base64 encoded keys
          SECRET_CONTENT="${{ secrets.HELM_RSA_PRIVATE_KEY }}"
          
          if [[ "$SECRET_CONTENT" == *"-----BEGIN PGP PRIVATE KEY BLOCK-----"* ]]; then
            echo "$SECRET_CONTENT" > private.key
          else
            echo "$SECRET_CONTENT" | tr -d ' \n\r\t' > private.key.b64
            base64 -d private.key.b64 > private.key 2>/dev/null
            rm -f private.key.b64
          fi
          
          # Import and export to legacy GPG format for Helm compatibility
          gpg --batch --import private.key
          gpg --batch --export > ~/.gnupg/pubring.gpg
          echo "$GPG_PASSPHRASE" | gpg --batch --passphrase-fd 0 --export-secret-keys > ~/.gnupg/secring.gpg
          
          rm -f private.key

      - name: Package and Sign Charts
        run: |
          # Get the key name for Helm
          KEY_NAME=$(gpg --list-secret-keys --with-colons "$GPG_KEY_ID" | grep "^uid" | head -1 | cut -d: -f10)
          
          # Create passphrase file for Helm
          echo "$GPG_PASSPHRASE" > /tmp/passphrase.txt
          chmod 600 /tmp/passphrase.txt
          
          for chart_dir in charts/*/; do
            [ -f "$chart_dir/Chart.yaml" ] || continue
            helm package --sign "$chart_dir" \
              --key "$KEY_NAME" \
              --keyring ~/.gnupg/secring.gpg \
              --passphrase-file /tmp/passphrase.txt
          done
          
          rm -f /tmp/passphrase.txt

      - name: Validate Signed Charts (PR only)
        if: github.event_name == 'pull_request'
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          
          # Import key for verification
          SECRET_CONTENT="${{ secrets.HELM_RSA_PRIVATE_KEY }}"
          
          if [[ "$SECRET_CONTENT" == *"-----BEGIN PGP PRIVATE KEY BLOCK-----"* ]]; then
            echo "$SECRET_CONTENT" | gpg --batch --import
          else
            echo "$SECRET_CONTENT" | tr -d ' \n\r\t' | base64 -d | gpg --batch --import
          fi
          
          gpg --batch --export > ~/.gnupg/pubring.gpg
          
          for chart in *.tgz; do
            helm verify "$chart"
          done

      - name: Create Release (Manual trigger only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          CHART_VERSION=$(helm show chart charts/exivity/ | grep '^version:' | awk '{print $2}')
          RELEASE_TAG="exivity-$CHART_VERSION"
          
          gpg --export --armor "$GPG_KEY_ID" > signing-key.asc
          
          gh release create "$RELEASE_TAG" \
            --title "Exivity Helm Chart $CHART_VERSION" \
            --notes "Signed Helm chart release" \
            *.tgz *.prov signing-key.asc
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          gpg --batch --yes --delete-secret-keys "$GPG_KEY_ID" 2>/dev/null || true
          gpg --batch --yes --delete-keys "$GPG_KEY_ID" 2>/dev/null || true
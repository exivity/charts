name: Release Charts

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'charts/**'
      - '.github/workflows/chart-release.yml'

jobs:
  helm-release:
    runs-on: ubuntu-latest
    env:
      GPG_KEY_ID: ${{ secrets.HELM_RSA_KEY_ID }}
      GPG_PASSPHRASE: ${{ secrets.HELM_RSA_PASSPHRASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Configure GPG
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          
          SECRET_CONTENT="${{ secrets.HELM_RSA_PRIVATE_KEY }}"
          
          if [[ "$SECRET_CONTENT" == *"-----BEGIN PGP PRIVATE KEY BLOCK-----"* ]]; then
            echo "$SECRET_CONTENT" | gpg --batch --import
          else
            echo "$SECRET_CONTENT" | tr -d ' \n\r\t' | base64 -d | gpg --batch --import
          fi
          
          gpg --batch --export > ~/.gnupg/pubring.gpg
          echo "$GPG_PASSPHRASE" | gpg --batch --passphrase-fd 0 --export-secret-keys > ~/.gnupg/secring.gpg

      - name: Package and Sign Charts
        run: |
          KEY_NAME=$(gpg --list-secret-keys --with-colons "$GPG_KEY_ID" | grep "^uid" | head -1 | cut -d: -f10)
          echo "$GPG_PASSPHRASE" > /tmp/passphrase.txt
          chmod 600 /tmp/passphrase.txt
          
          # Create .cr-release-packages directory for chart-releaser-action
          mkdir -p .cr-release-packages
          
          for chart_dir in charts/*/; do
            [ -f "$chart_dir/Chart.yaml" ] || continue
            echo "📦 Packaging and signing chart: $chart_dir"
            
            # Package and sign chart in the .cr-release-packages directory
            helm package --sign "$chart_dir" \
              --key "$KEY_NAME" \
              --keyring ~/.gnupg/secring.gpg \
              --passphrase-file /tmp/passphrase.txt \
              --destination .cr-release-packages
          done
          
          rm -f /tmp/passphrase.txt
          
          # List created packages for verification
          echo "📋 Created signed packages:"
          ls -la .cr-release-packages/

      - name: Validate Signed Charts (PR only)
        if: github.event_name == 'pull_request'
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          
          SECRET_CONTENT="${{ secrets.HELM_RSA_PRIVATE_KEY }}"
          
          if [[ "$SECRET_CONTENT" == *"-----BEGIN PGP PRIVATE KEY BLOCK-----"* ]]; then
            echo "$SECRET_CONTENT" | gpg --batch --import
          else
            echo "$SECRET_CONTENT" | tr -d ' \n\r\t' | base64 -d | gpg --batch --import
          fi
          
          gpg --batch --export > ~/.gnupg/pubring.gpg
          
          # Validate charts from the .cr-release-packages directory
          for chart in .cr-release-packages/*.tgz; do
            [ -f "$chart" ] || continue
            echo "🔍 Verifying $chart..."
            helm verify "$chart"
          done
          echo "✅ All charts are properly signed and verified"

      - name: Run chart-releaser
        if: github.event_name == 'workflow_dispatch'
        uses: exivity/chart-releaser-action@v1.1.0
        env:
          CR_TOKEN: "${{ secrets.GH_BOT_TOKEN }}"

      - name: Cleanup
        if: always()
        run: |
          gpg --batch --yes --delete-secret-keys "$GPG_KEY_ID" 2>/dev/null || true
          gpg --batch --yes --delete-keys "$GPG_KEY_ID" 2>/dev/null || true

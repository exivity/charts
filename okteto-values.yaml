# -- Override deployment name
nameOverride: ""

# -- Please overwrite this, and use your actual licence or "demo" if you just want to look around, as it can only be changed through the Helm chart
licence:      "demo"

# -- Override secrets, this is only used on first install.
# -- Please DO NOT leave these values propagated in your values.yaml after first install, on upgrade the values are copied from the previous release.
secret:
  appKey:    ""
  jwtSecret: ""

ingress:
  # -- Enable ingress
  enabled:          true
  # -- Host/domain name to create the ingress route for
  host:             exivity
  # -- Set on ingress, if empty it's not set
  ingressClassName: ""

  # Configure trusted proxies for the Proximity service API to correctly handle headers like HTTP_X_FORWARDED_PROTO.
  # This setting should be used when the service is behind a proxy or LoadBalancer, such as Traefik, which is acting as the Kubernetes cluster's load balancer.
  # The value should be the IP address of the load balancer.
  #
  # Examples:
  #
  # - Single IP address:
  #   trustedProxy: '10.0.0.1'
  #
  # - CIDR notation for a range like the default value for a DigitalOcean Kubernetes cluster:
  #   trustedProxy: '10.244.0.0/16'
  #
  # - Comma-separated list of entries:
  #   trustedProxy: '127.0.0.1, 10.244.0.0/16'
  #
  # - Wildcard (*) to trust any proxy connecting directly to the Proximity service API:
  #   trustedProxy: '*'
  #
  trustedProxy: ""

  annotations: { }
  #  kubernetes.io/ingress.allow-http:         "false"
  #  nginx.ingress.kubernetes.io/ssl-redirect: "true"
  #  nginx.ingress.kubernetes.io/use-regex:    "true"

  tls:
    # -- Enable TLS handling, disable to terminate TLS before ingress
    enabled: false
    # -- Existing TLS secret name, or set to "-" to generate a cert
    secret:  "-"

storage:
  storageClass:           ""
  helmResourcePolicyKeep: true
  sharedVolumeAccessMode: ReadWriteMany

# bitnami/postgresql chart config
postgresql:
  # -- Install PostgreSQL
  enabled:    true
  global:
    postgresql:
      auth:
        # -- Database name
        database:         exivity
        # -- Database username
        username:         exivity
        # -- Database password
        password:         Password12!
        # -- Database root password, not needed when you bring your own DB
        postgresPassword: Password13!

  # -- Bring your own DB host
  host:       ""
  # -- Bring your own DB port
  port:       ""
  # -- Bring your own DB sslmode: enable/disable
  sslmode:    ""


rabbitmq:
  enabled: true
  clustering:
    enabled: false

  auth:
    username:     user
    password:     pass

  # If you bring your own MQ
  host:    ""
  port:    ""
  vhost:   ""
  # TLS connection: true/false
  secure:  ""

service:
  registry:   docker.io
  tag:        ""
  pullPolicy: IfNotPresent

  pullSecrets: [ ]

  # Front-end components
  glass:
    registry:    ""
    repository:  exivity/glass
    tag:         ""
    pullPolicy:  ""
    servicePort: 80
    serviceType: ClusterIP
    replicas:    1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  proximityApi:
    registry:    ""
    repository:  exivity/proximity-api
    tag:         ""
    pullPolicy:  ""
    # set the PHP memory limit per requests
    # https://www.php.net/manual/en/ini.core.php#ini.memory-limit
    phpMemoryLimit: "3G"
    servicePort: 80
    serviceType: ClusterIP
    replicas:    1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "400Mi"

  # Back-end components
  chronos:
    registry:   ""
    repository: exivity/chronos
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  dbInit:
    registry:   ""
    repository: exivity/db
    tag:        ""
    pullPolicy: ""
    nodeName: ""
    nodeSelector: {}
    waitForServer:
      resources: {}
    migration:
      resources: {}

  dummyData:
    enabled:    false
    registry:   ""
    repository: exivity/dummy-data
    tag:        "main" # Tag should be changed to match the rest in the future
    pullPolicy: ""
    nodeName: ""
    nodeSelector: {}
    resources: {}

  edify:
    registry:   ""
    repository: exivity/edify
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    # custom edify cache path
    # tmpPath: "/tmp"
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  executor:
    registry:   ""
    repository: exivity/executor
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  griffon:
    registry:   ""
    repository: exivity/griffon
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  horizon:
    registry:   ""
    repository: exivity/horizon
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  pigeon:
    registry:   ""
    repository: exivity/pigeon
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  proximityCli:
    registry:   ""
    repository: exivity/proximity-cli
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  transcript:
    registry:   ""
    repository: exivity/transcript
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"

  use:
    registry:   ""
    repository: exivity/use
    tag:        ""
    pullPolicy: ""
    replicas:   1
    nodeName: ""
    nodeSelector: {}
    resources:
      requests:
        cpu:    "25m"
        memory: "50Mi"
    # Configuration for the init container that installs CA certificates
    initContainers:
      installCACert:
        resources:
          requests:
            cpu:    "25m"
            memory: "50Mi"
    # In the following caCertificates section, you can specify the Certificate Authority (CA) certificates that your service uses. 
    # Each certificate should be listed as a key-value pair, where the key is a name you assign to the certificate for identification 
    # (like 'rootCA' or 'intermediateCA'), and the value is the actual certificate. You can include as many certificates as necessary 
    # by replacing the placeholder names like 'rootCA.pem' and 'intermediateCA.pem' with the actual file names of your certificates.
    #
    # Instructions for fetching CA certificates using OpenSSL:
    # --------------------------------------------------------
    # To fetch and add CA certificates to this configuration, follow the steps below using OpenSSL:
    # 1. Open a terminal on your system.
    # 2. Use the following OpenSSL command to connect to the desired HTTPS server and retrieve the certificate:
    #      echo | openssl s_client -servername <your-server-name> -connect <your-server-name>:443 -showcerts | openssl x509 -outform PEM > your_certificate_name.pem
    #    Replace `<your-server-name>` with the actual server name and `your_certificate_name.pem` with the desired file name for your certificate.
    # 3. Once you have the certificate, you can add it to the caCertificates section below by replacing the existing placeholders.
    #    Ensure the entire certificate text including the "BEGIN CERTIFICATE" and "END CERTIFICATE" lines is correctly pasted under the appropriate key.
    caCertificates:
      # rootCA.pem: |
      #   -----BEGIN CERTIFICATE-----
      #   MIIFPDCCB....
      #   -----END CERTIFICATE-----
      # intermediateCA.pem: |
      #   -----BEGIN CERTIFICATE-----
      #   MIIFPDCCB....
      #   -----END CERTIFICATE-----

logLevel:
  backend: "info"
